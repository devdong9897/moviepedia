{"ast":null,"code":"var _jsxFileName = \"/Users/dongwooknam/Desktop/\\u110F\\u1169\\u1103\\u1173\\u110B\\u1175\\u11BA/moviepedia/src/components/ReviewForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./ReviewForm.css\";\nimport FileInput from \"./FileInput\";\nimport RatingInput from \"./RatingInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReviewForm() {\n  _s();\n  const [values, setValues] = useState({\n    title: \"\",\n    rating: 0,\n    content: \"\",\n    imgFile: null\n  });\n  const handleChange = (name, value) => {\n    // 여기서 prevValue를 사용하면 title, rating, content, imgFile중 변경된 필드만 갱신되고 나머지는 유지되게 한다.\n    // 예를 들어, title을 \"Great Movie!\"로 변경하면 [name]: value 이 부분은 title: \"Great Movie!\" 실질적으로 이렇게 되고,\n    // values는 { title: \"Great Movie!\", rating: 0, content: \"\", imgFile: null }로 설정된다.\n    setValues(prevValue => ({\n      ...prevValue,\n      [name]: value\n    }));\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    handleChange(name, value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append();\n    console.log(values);\n  };\n\n  // 제어컴포넌트 : values.title이나 values.rating 같은 state 값이 화면에 표시되는 값과 항상 같도록해준다.\n  // 그래서 사용자가 값을 입력할 때마다 setValues가 호출되어 state가 업데이트되며 화면에 즉시 반영.\n  // input의 value값을 리액트에 지정.\n\n  // 비제어컴포넌트 : 비제어 컴포넌트는 state가 아닌, DOM 자체에서 값을 가져오는 방식.\n  // 예를 들어, <input ref={inputRef} />처럼 ref를 사용해 직접 DOM 요소를 가리킨 후 inputRef.current.value로 값을 읽어온다.\n  // input의 value값을 리액트에서 지정하지 않음.\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"ReviewForm\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(FileInput, {\n      name: \"imgFile\",\n      value: values.imgFile,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"title\",\n      value: values.title,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RatingInput, {\n      value: values.rating,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"content\",\n      value: values.content,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"\\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(ReviewForm, \"eQTQRCw7DfXfDVWFUCq0wFxp5UI=\");\n_c = ReviewForm;\nexport default ReviewForm;\nvar _c;\n$RefreshReg$(_c, \"ReviewForm\");","map":{"version":3,"names":["useState","FileInput","RatingInput","jsxDEV","_jsxDEV","ReviewForm","_s","values","setValues","title","rating","content","imgFile","handleChange","name","value","prevValue","handleInputChange","e","target","handleSubmit","preventDefault","formData","FormData","append","console","log","className","onSubmit","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/dongwooknam/Desktop/코드잇/moviepedia/src/components/ReviewForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./ReviewForm.css\";\nimport FileInput from \"./FileInput\";\nimport RatingInput from \"./RatingInput\";\n\nfunction ReviewForm() {\n  const [values, setValues] = useState({\n    title: \"\",\n    rating: 0,\n    content: \"\",\n    imgFile: null,\n  });\n\n  const handleChange = (name, value) => {\n    // 여기서 prevValue를 사용하면 title, rating, content, imgFile중 변경된 필드만 갱신되고 나머지는 유지되게 한다.\n    // 예를 들어, title을 \"Great Movie!\"로 변경하면 [name]: value 이 부분은 title: \"Great Movie!\" 실질적으로 이렇게 되고,\n    // values는 { title: \"Great Movie!\", rating: 0, content: \"\", imgFile: null }로 설정된다.\n    setValues((prevValue) => ({\n      ...prevValue,\n      [name]: value,\n    }));\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    handleChange(name, value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append()\n    console.log(values);\n  };\n\n  // 제어컴포넌트 : values.title이나 values.rating 같은 state 값이 화면에 표시되는 값과 항상 같도록해준다.\n  // 그래서 사용자가 값을 입력할 때마다 setValues가 호출되어 state가 업데이트되며 화면에 즉시 반영.\n  // input의 value값을 리액트에 지정.\n\n  // 비제어컴포넌트 : 비제어 컴포넌트는 state가 아닌, DOM 자체에서 값을 가져오는 방식.\n  // 예를 들어, <input ref={inputRef} />처럼 ref를 사용해 직접 DOM 요소를 가리킨 후 inputRef.current.value로 값을 읽어온다.\n  // input의 value값을 리액트에서 지정하지 않음.\n  return (\n    <form className=\"ReviewForm\" onSubmit={handleSubmit}>\n      <FileInput\n        name=\"imgFile\"\n        value={values.imgFile}\n        onChange={handleChange}\n      />\n      <input name=\"title\" value={values.title} onChange={handleInputChange} />\n      <RatingInput value={values.rating} onChange={handleChange} />\n      <textarea\n        name=\"content\"\n        value={values.content}\n        onChange={handleInputChange}\n      />\n      <button type=\"submit\">확인</button>\n    </form>\n  );\n}\n\nexport default ReviewForm;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,kBAAkB;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC;IACnCS,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;IACpC;IACA;IACA;IACAP,SAAS,CAAEQ,SAAS,KAAM;MACxB,GAAGA,SAAS;MACZ,CAACF,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEJ,IAAI;MAAEC;IAAM,CAAC,GAAGG,CAAC,CAACC,MAAM;IAChCN,YAAY,CAACC,IAAI,EAAEC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMK,YAAY,GAAG,MAAOF,CAAC,IAAK;IAChCA,CAAC,CAACG,cAAc,CAAC,CAAC;IAClB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,CAAC;IACjBC,OAAO,CAACC,GAAG,CAACnB,MAAM,CAAC;EACrB,CAAC;;EAED;EACA;EACA;;EAEA;EACA;EACA;EACA,oBACEH,OAAA;IAAMuB,SAAS,EAAC,YAAY;IAACC,QAAQ,EAAER,YAAa;IAAAS,QAAA,gBAClDzB,OAAA,CAACH,SAAS;MACRa,IAAI,EAAC,SAAS;MACdC,KAAK,EAAER,MAAM,CAACK,OAAQ;MACtBkB,QAAQ,EAAEjB;IAAa;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACF9B,OAAA;MAAOU,IAAI,EAAC,OAAO;MAACC,KAAK,EAAER,MAAM,CAACE,KAAM;MAACqB,QAAQ,EAAEb;IAAkB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxE9B,OAAA,CAACF,WAAW;MAACa,KAAK,EAAER,MAAM,CAACG,MAAO;MAACoB,QAAQ,EAAEjB;IAAa;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7D9B,OAAA;MACEU,IAAI,EAAC,SAAS;MACdC,KAAK,EAAER,MAAM,CAACI,OAAQ;MACtBmB,QAAQ,EAAEb;IAAkB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACF9B,OAAA;MAAQ+B,IAAI,EAAC,QAAQ;MAAAN,QAAA,EAAC;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEX;AAAC5B,EAAA,CAtDQD,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAwDnB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}